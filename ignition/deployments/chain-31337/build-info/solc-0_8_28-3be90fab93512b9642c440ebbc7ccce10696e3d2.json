{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-3be90fab93512b9642c440ebbc7ccce10696e3d2",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/FarmLand.sol": "project/contracts/FarmLand.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/FarmLand.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./GameToken.sol\";\n\n/**\n * @title FarmLand\n * @dev Manages farm plots, planting, and harvesting for the Soil2Sauce farming game\n */\ncontract FarmLand is Ownable {\n    GameToken public gameToken;\n\n    enum CropType { WHEAT, TOMATO, STRAWBERRY, CARROT }\n    enum PlotStatus { EMPTY, GROWING, READY }\n\n    struct Plot {\n        PlotStatus status;\n        CropType cropType;\n        uint256 sowTime;\n        uint256 growthDuration;\n        address owner;\n    }\n\n    struct CropData {\n        uint256 growthTime;\n        uint256 seedPrice;\n        uint256 sellPrice;\n        string name;\n    }\n\n    // Player address => array of plot IDs\n    mapping(address => uint256[]) public playerPlots;\n    // Plot ID => Plot data\n    mapping(uint256 => Plot) public plots;\n    // Player address => CropType => seed quantity\n    mapping(address => mapping(CropType => uint256)) public seedInventory;\n    // Player address => CropType => harvested crop quantity\n    mapping(address => mapping(CropType => uint256)) public harvestedCrops;\n    // CropType => CropData\n    mapping(CropType => CropData) public cropData;\n\n    uint256 public nextPlotId;\n    uint256 public constant INITIAL_PLOTS = 9;\n    uint256 public constant EXPANSION_COST = 50 * 10 ** 18; // 50 tokens\n    uint256 public constant INITIAL_WHEAT_SEEDS = 5;\n\n    event PlotCreated(address indexed player, uint256 plotId);\n    event SeedPlanted(address indexed player, uint256 plotId, CropType cropType);\n    event CropHarvested(address indexed player, uint256 plotId, CropType cropType);\n    event SeedsPurchased(address indexed player, CropType cropType, uint256 quantity, uint256 cost);\n    event CropsSold(address indexed player, CropType cropType, uint256 quantity, uint256 earnings);\n    event CropsConverted(address indexed player, CropType cropType, uint256 cropsUsed, uint256 seedsGained);\n    event FarmExpanded(address indexed player, uint256 newPlotId);\n\n    constructor(address _gameToken) Ownable(msg.sender) {\n        gameToken = GameToken(_gameToken);\n\n        // Initialize crop data (growth times in seconds)\n        cropData[CropType.WHEAT] = CropData({\n            growthTime: 10, // 10 seconds for testing\n            seedPrice: 5 * 10 ** 18,\n            sellPrice: 4 * 10 ** 18,\n            name: \"Wheat\"\n        });\n\n        cropData[CropType.TOMATO] = CropData({\n            growthTime: 15,\n            seedPrice: 8 * 10 ** 18,\n            sellPrice: 6 * 10 ** 18,\n            name: \"Tomato\"\n        });\n\n        cropData[CropType.STRAWBERRY] = CropData({\n            growthTime: 12,\n            seedPrice: 10 * 10 ** 18,\n            sellPrice: 8 * 10 ** 18,\n            name: \"Strawberry\"\n        });\n\n        cropData[CropType.CARROT] = CropData({\n            growthTime: 8,\n            seedPrice: 6 * 10 ** 18,\n            sellPrice: 5 * 10 ** 18,\n            name: \"Carrot\"\n        });\n    }\n\n    /**\n     * @dev Initialize a new player with plots and starter seeds\n     * @param player Address of the new player\n     */\n    function initializePlayer(address player) external {\n        require(playerPlots[player].length == 0, \"FarmLand: player already initialized\");\n\n        // Create initial plots\n        for (uint256 i = 0; i < INITIAL_PLOTS; i++) {\n            uint256 plotId = nextPlotId++;\n            plots[plotId] = Plot({\n                status: PlotStatus.EMPTY,\n                cropType: CropType.WHEAT,\n                sowTime: 0,\n                growthDuration: 0,\n                owner: player\n            });\n            playerPlots[player].push(plotId);\n            emit PlotCreated(player, plotId);\n        }\n\n        // Give starter seeds\n        seedInventory[player][CropType.WHEAT] = INITIAL_WHEAT_SEEDS;\n    }\n\n    /**\n     * @dev Plant a seed on a plot\n     * @param plotId ID of the plot to plant on\n     * @param cropType Type of crop to plant\n     */\n    function plantSeed(uint256 plotId, CropType cropType) external {\n        Plot storage plot = plots[plotId];\n        require(plot.owner == msg.sender, \"FarmLand: not plot owner\");\n        require(plot.status == PlotStatus.EMPTY, \"FarmLand: plot not empty\");\n        require(seedInventory[msg.sender][cropType] > 0, \"FarmLand: no seeds available\");\n\n        seedInventory[msg.sender][cropType]--;\n        plot.status = PlotStatus.GROWING;\n        plot.cropType = cropType;\n        plot.sowTime = block.timestamp;\n        plot.growthDuration = cropData[cropType].growthTime;\n\n        emit SeedPlanted(msg.sender, plotId, cropType);\n    }\n\n    /**\n     * @dev Harvest a ready crop from a plot\n     * @param plotId ID of the plot to harvest\n     */\n    function harvestCrop(uint256 plotId) external {\n        Plot storage plot = plots[plotId];\n        require(plot.owner == msg.sender, \"FarmLand: not plot owner\");\n        require(plot.status == PlotStatus.GROWING, \"FarmLand: plot not growing\");\n        require(\n            block.timestamp >= plot.sowTime + plot.growthDuration,\n            \"FarmLand: crop not ready\"\n        );\n\n        CropType cropType = plot.cropType;\n        harvestedCrops[msg.sender][cropType]++;\n\n        plot.status = PlotStatus.EMPTY;\n        plot.sowTime = 0;\n        plot.growthDuration = 0;\n\n        emit CropHarvested(msg.sender, plotId, cropType);\n    }\n\n    /**\n     * @dev Buy seeds from the seed market\n     * @param cropType Type of seeds to buy\n     * @param quantity Number of seeds to buy\n     */\n    function buySeeds(CropType cropType, uint256 quantity) external {\n        require(quantity > 0, \"FarmLand: quantity must be > 0\");\n\n        uint256 cost = cropData[cropType].seedPrice * quantity;\n        require(gameToken.balanceOf(msg.sender) >= cost, \"FarmLand: insufficient funds\");\n\n        gameToken.burn(msg.sender, cost);\n        seedInventory[msg.sender][cropType] += quantity;\n\n        emit SeedsPurchased(msg.sender, cropType, quantity, cost);\n    }\n\n    /**\n     * @dev Sell harvested crops\n     * @param cropType Type of crops to sell\n     * @param quantity Number of crops to sell\n     */\n    function sellCrops(CropType cropType, uint256 quantity) external {\n        require(harvestedCrops[msg.sender][cropType] >= quantity, \"FarmLand: insufficient crops\");\n        require(quantity > 0, \"FarmLand: quantity must be > 0\");\n\n        harvestedCrops[msg.sender][cropType] -= quantity;\n        uint256 earnings = cropData[cropType].sellPrice * quantity;\n        gameToken.mint(msg.sender, earnings);\n\n        emit CropsSold(msg.sender, cropType, quantity, earnings);\n    }\n\n    /**\n     * @dev Convert harvested crops to seeds (1 crop = 2 seeds)\n     * @param cropType Type of crops to convert\n     * @param quantity Number of crops to convert\n     */\n    function convertCropsToSeeds(CropType cropType, uint256 quantity) external {\n        require(harvestedCrops[msg.sender][cropType] >= quantity, \"FarmLand: insufficient crops\");\n        require(quantity > 0, \"FarmLand: quantity must be > 0\");\n\n        harvestedCrops[msg.sender][cropType] -= quantity;\n        seedInventory[msg.sender][cropType] += quantity * 2;\n\n        emit CropsConverted(msg.sender, cropType, quantity, quantity * 2);\n    }\n\n    /**\n     * @dev Expand farm by adding a new plot\n     */\n    function expandFarm() external {\n        require(\n            gameToken.balanceOf(msg.sender) >= EXPANSION_COST,\n            \"FarmLand: insufficient funds\"\n        );\n\n        gameToken.burn(msg.sender, EXPANSION_COST);\n\n        uint256 plotId = nextPlotId++;\n        plots[plotId] = Plot({\n            status: PlotStatus.EMPTY,\n            cropType: CropType.WHEAT,\n            sowTime: 0,\n            growthDuration: 0,\n            owner: msg.sender\n        });\n        playerPlots[msg.sender].push(plotId);\n\n        emit FarmExpanded(msg.sender, plotId);\n    }\n\n    /**\n     * @dev Get all plot IDs for a player\n     * @param player Address of the player\n     * @return Array of plot IDs\n     */\n    function getPlayerPlots(address player) external view returns (uint256[] memory) {\n        return playerPlots[player];\n    }\n\n    /**\n     * @dev Get plot status and check if ready for harvest\n     * @param plotId ID of the plot\n     * @return status Current status of the plot\n     * @return cropType Type of crop growing\n     * @return isReady Whether the crop is ready to harvest\n     * @return remainingTime Time remaining until ready (0 if ready)\n     */\n    function getPlotStatus(uint256 plotId) external view returns (\n        PlotStatus status,\n        CropType cropType,\n        bool isReady,\n        uint256 remainingTime\n    ) {\n        Plot memory plot = plots[plotId];\n        status = plot.status;\n        cropType = plot.cropType;\n\n        if (plot.status == PlotStatus.GROWING) {\n            uint256 readyTime = plot.sowTime + plot.growthDuration;\n            if (block.timestamp >= readyTime) {\n                isReady = true;\n                remainingTime = 0;\n            } else {\n                isReady = false;\n                remainingTime = readyTime - block.timestamp;\n            }\n        }\n    }\n\n    /**\n     * @dev Get player's seed inventory\n     * @param player Address of the player\n     * @param cropType Type of seed\n     * @return quantity Number of seeds\n     */\n    function getSeedInventory(address player, CropType cropType) external view returns (uint256) {\n        return seedInventory[player][cropType];\n    }\n\n    /**\n     * @dev Get player's harvested crops\n     * @param player Address of the player\n     * @param cropType Type of crop\n     * @return quantity Number of harvested crops\n     */\n    function getHarvestedCrops(address player, CropType cropType) external view returns (uint256) {\n        return harvestedCrops[player][cropType];\n    }\n}\n"
      },
      "project/contracts/GameToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title GameToken\n * @dev ERC20 token for the Soil2Sauce farming game\n * Players earn tokens by selling crops and can spend them to buy seeds, animals, and expand their farm\n */\ncontract GameToken is ERC20, Ownable {\n    // Authorized game contracts that can mint/burn tokens\n    mapping(address => bool) public authorizedContracts;\n\n    event ContractAuthorized(address indexed contractAddress, bool authorized);\n    event TokensMinted(address indexed to, uint256 amount);\n    event TokensBurned(address indexed from, uint256 amount);\n\n    constructor() ERC20(\"GameCoin\", \"GCOIN\") Ownable(msg.sender) {\n        // Mint initial supply to deployer for distribution\n        _mint(msg.sender, 1000000 * 10 ** decimals());\n    }\n\n    /**\n     * @dev Authorize a game contract to mint/burn tokens\n     * @param contractAddress Address of the contract to authorize\n     * @param authorized Whether the contract is authorized\n     */\n    function setAuthorizedContract(address contractAddress, bool authorized) external onlyOwner {\n        authorizedContracts[contractAddress] = authorized;\n        emit ContractAuthorized(contractAddress, authorized);\n    }\n\n    /**\n     * @dev Mint tokens to a player (called by authorized game contracts)\n     * @param to Address to mint tokens to\n     * @param amount Amount of tokens to mint\n     */\n    function mint(address to, uint256 amount) external {\n        require(authorizedContracts[msg.sender], \"GameToken: caller not authorized\");\n        _mint(to, amount);\n        emit TokensMinted(to, amount);\n    }\n\n    /**\n     * @dev Burn tokens from a player (called by authorized game contracts)\n     * @param from Address to burn tokens from\n     * @param amount Amount of tokens to burn\n     */\n    function burn(address from, uint256 amount) external {\n        require(authorizedContracts[msg.sender], \"GameToken: caller not authorized\");\n        _burn(from, amount);\n        emit TokensBurned(from, amount);\n    }\n\n    /**\n     * @dev Give initial tokens to new players\n     * @param player Address of the new player\n     */\n    function giveStarterTokens(address player) external onlyOwner {\n        require(balanceOf(player) == 0, \"GameToken: player already has tokens\");\n        _mint(player, 100 * 10 ** decimals());\n    }\n}\n"
      }
    }
  }
}